{"categories":[],"posts":[{"content":"介绍 什么是hugo hugo是一个静态的网站生成器。如果你不会写代码，但是需要一个经常会被访问，但是改动频率较小的站点（比如blog,产品的宣传页面），就可以使用上hugo了。\n与jekyll，hexo的区别 类似hugo这样的静态站点生成器，还有hexo和jekyll。\nhexo基于nodejs开发，没具体用过，类似hugo，社区也有不少主题可以选择，使用简单，应也是一个不错的选择； jekyll基于ruby开发，一开始我也是准备使用jekyll，但是碰到了一些问题： 本人日常使用windows，而jekyll只能在linux上运行，遂只能安装在虚拟机里面的centos； 本人从没使用过ruby，所以一开始在折腾Gem时，属实花了一些时间，踩了不少坑，主要还是因为GFW对ruby及其包的安装源的拦截 🖕 ，导致体验相当差。 如果你使用的是windows系统，对计算机知识没啥兴趣，想快速看到自己的blog，建议使用hugo。\n安装和使用hugo windows安装 本人的环境为win10，安装步骤按照官网教程来即可，使用跨平台的二进制文件安装，相当简洁（go的优势）。\n先创建C:\\Hugo\\bin（用来装hugo程序）和C:\\Hugo\\Sites（用来装你的站点）文件夹； 再将下载的二进制安装包解压到C:\\Hugo\\bin下； 最后需要把C:\\Hugo\\bin文件夹添加到你的环境变量Path中，这样hugo cli就可以在powershell或者cmd中直接使用了。 运行hugo version，成功打印出版本号，安装结束。 基本使用 生成站点 安装好hugo之后，就可以开始构建自己的website了。\nC:\\\u0026gt; cd C:\\Hugo\\Sites C:\\Hugo\\Sites\u0026gt; hugo new site example #新建example站点 运行之后，在Sites文件夹下，就可以看见一个新的文件夹example，这个就是blog的根目录了。\n. ├ archetypes # content中用hugo new生成的文章的原型 ├ config.toml # 主配置文件，也可以是yml或者json格式，只要叫这个名字即可 ├ content # blog内容文件夹，blog的主要内容都会放在这里 ├ data # 存储hugo在生成网站时使用到的一些配置文件 ├ layouts # 存储用来渲染静态页面的.html模板 ├ static # 静态文件，css，js，图片等 └ themes # 存储用到的主题 生成文章和启动本地hugo服务 生成example目录后，可以使用hugo cli自动生成一个文章模板\nC:\\Hugo\\Sites\\example\u0026gt; hugo new posts/test.md 输入命令后，content文件夹下面会出现一个/posts/test.md文件,这就是一篇文章了，文件中内容如下:\n---\ntitle: \u0026ldquo;Test\u0026rdquo; # 文章标题\ndate: 2022-08-08T17:14:38+08:00 # 文章时间\ndraft: true # 是否为草稿，在文章正式commit时，这里应该改为false\n---\n在下面追加markdown格式文本，就会成为文章内容了。\n","id":0,"section":"posts","summary":"介绍 什么是hugo hugo是一个静态的网站生成器。如果你不会写代码，但是需要一个经常会被访问，但是改动频率较小的站点（比如blog,产品的宣","tags":["hugo"],"title":"使用hugo搭建自己的github page","uri":"https://jasm718.github.io/2019/03/hugo-blog/","year":"2019"}],"tags":[{"title":"hugo","uri":"https://jasm718.github.io/tags/hugo/"}]}